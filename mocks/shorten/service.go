// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/shorten/shorten.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	database "github.com/VladimirSh98/urlShortener/internal/app/repository/database"
	gomock "github.com/golang/mock/gomock"
)

// MockShortenServiceInterface is a mock of ShortenServiceInterface interface.
type MockShortenServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockShortenServiceInterfaceMockRecorder
}

// MockShortenServiceInterfaceMockRecorder is the mock recorder for MockShortenServiceInterface.
type MockShortenServiceInterfaceMockRecorder struct {
	mock *MockShortenServiceInterface
}

// NewMockShortenServiceInterface creates a new mock instance.
func NewMockShortenServiceInterface(ctrl *gomock.Controller) *MockShortenServiceInterface {
	mock := &MockShortenServiceInterface{ctrl: ctrl}
	mock.recorder = &MockShortenServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenServiceInterface) EXPECT() *MockShortenServiceInterfaceMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockShortenServiceInterface) BatchCreate(data []database.ShortenBatchRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BatchCreate", data)
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockShortenServiceInterfaceMockRecorder) BatchCreate(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockShortenServiceInterface)(nil).BatchCreate), data)
}

// BatchUpdate mocks base method.
func (m *MockShortenServiceInterface) BatchUpdate(data []string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdate", data, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdate indicates an expected call of BatchUpdate.
func (mr *MockShortenServiceInterfaceMockRecorder) BatchUpdate(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdate", reflect.TypeOf((*MockShortenServiceInterface)(nil).BatchUpdate), data, userID)
}

// Create mocks base method.
func (m *MockShortenServiceInterface) Create(mask, originalURL string, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", mask, originalURL, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockShortenServiceInterfaceMockRecorder) Create(mask, originalURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShortenServiceInterface)(nil).Create), mask, originalURL, userID)
}

// GetAllRecords mocks base method.
func (m *MockShortenServiceInterface) GetAllRecords() ([]database.Shorter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecords")
	ret0, _ := ret[0].([]database.Shorter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecords indicates an expected call of GetAllRecords.
func (mr *MockShortenServiceInterfaceMockRecorder) GetAllRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecords", reflect.TypeOf((*MockShortenServiceInterface)(nil).GetAllRecords))
}

// GetByOriginalURL mocks base method.
func (m *MockShortenServiceInterface) GetByOriginalURL(originalURL string) (database.Shorter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", originalURL)
	ret0, _ := ret[0].(database.Shorter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockShortenServiceInterfaceMockRecorder) GetByOriginalURL(originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockShortenServiceInterface)(nil).GetByOriginalURL), originalURL)
}

// GetByShortURL mocks base method.
func (m *MockShortenServiceInterface) GetByShortURL(shortURL string) (database.Shorter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", shortURL)
	ret0, _ := ret[0].(database.Shorter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockShortenServiceInterfaceMockRecorder) GetByShortURL(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockShortenServiceInterface)(nil).GetByShortURL), shortURL)
}

// GetByUserID mocks base method.
func (m *MockShortenServiceInterface) GetByUserID(userID int) ([]database.Shorter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].([]database.Shorter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockShortenServiceInterfaceMockRecorder) GetByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockShortenServiceInterface)(nil).GetByUserID), userID)
}

// Ping mocks base method.
func (m *MockShortenServiceInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockShortenServiceInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockShortenServiceInterface)(nil).Ping))
}
