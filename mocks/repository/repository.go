// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/database/repository.go

// Package mocks is a generated GoMock package.
package repository

import (
	sql "database/sql"
	reflect "reflect"

	database "github.com/VladimirSh98/urlShortener/internal/app/repository/database"
	gomock "github.com/golang/mock/gomock"
)

// MockShortenRepoInterface is a mock of ShortenRepoInterface interface.
type MockShortenRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockShortenRepoInterfaceMockRecorder
}

// MockShortenRepoInterfaceMockRecorder is the mock recorder for MockShortenRepoInterface.
type MockShortenRepoInterfaceMockRecorder struct {
	mock *MockShortenRepoInterface
}

// NewMockShortenRepoInterface creates a new mock instance.
func NewMockShortenRepoInterface(ctrl *gomock.Controller) *MockShortenRepoInterface {
	mock := &MockShortenRepoInterface{ctrl: ctrl}
	mock.recorder = &MockShortenRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenRepoInterface) EXPECT() *MockShortenRepoInterfaceMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockShortenRepoInterface) BatchCreate(data []database.ShortenBatchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockShortenRepoInterfaceMockRecorder) BatchCreate(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockShortenRepoInterface)(nil).BatchCreate), data)
}

// BatchUpdate mocks base method.
func (m *MockShortenRepoInterface) BatchUpdate(data []string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdate", data, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdate indicates an expected call of BatchUpdate.
func (mr *MockShortenRepoInterfaceMockRecorder) BatchUpdate(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdate", reflect.TypeOf((*MockShortenRepoInterface)(nil).BatchUpdate), data, userID)
}

// Create mocks base method.
func (m *MockShortenRepoInterface) Create(mask, originalURL string, userID int) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", mask, originalURL, userID)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockShortenRepoInterfaceMockRecorder) Create(mask, originalURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShortenRepoInterface)(nil).Create), mask, originalURL, userID)
}

// GetAllRecords mocks base method.
func (m *MockShortenRepoInterface) GetAllRecords() ([]database.Shorter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecords")
	ret0, _ := ret[0].([]database.Shorter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecords indicates an expected call of GetAllRecords.
func (mr *MockShortenRepoInterfaceMockRecorder) GetAllRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecords", reflect.TypeOf((*MockShortenRepoInterface)(nil).GetAllRecords))
}

// GetByOriginalURL mocks base method.
func (m *MockShortenRepoInterface) GetByOriginalURL(originalURL string) (database.Shorter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", originalURL)
	ret0, _ := ret[0].(database.Shorter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockShortenRepoInterfaceMockRecorder) GetByOriginalURL(originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockShortenRepoInterface)(nil).GetByOriginalURL), originalURL)
}

// GetByShortURL mocks base method.
func (m *MockShortenRepoInterface) GetByShortURL(shortURL string) (database.Shorter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", shortURL)
	ret0, _ := ret[0].(database.Shorter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockShortenRepoInterfaceMockRecorder) GetByShortURL(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockShortenRepoInterface)(nil).GetByShortURL), shortURL)
}

// GetByUserID mocks base method.
func (m *MockShortenRepoInterface) GetByUserID(userID int) ([]database.Shorter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].([]database.Shorter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockShortenRepoInterfaceMockRecorder) GetByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockShortenRepoInterface)(nil).GetByUserID), userID)
}

// Ping mocks base method.
func (m *MockShortenRepoInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockShortenRepoInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockShortenRepoInterface)(nil).Ping))
}
